package com.drools.study.rules

import com.drools.study.model.Customer
import com.drools.study.model.CreditScore
import com.drools.study.model.Account
import com.drools.study.model.Transaction
import com.drools.study.model.RiskAlert
import com.drools.study.model.LoanApplication

/**
 * Credit Scoring Rules
 * Comprehensive rules for calculating credit scores, risk assessments, and creditworthiness evaluation
 */

// Base credit score calculation
rule "Calculate Base Credit Score"
    agenda-group "credit-scoring"
    salience 100
    when
        $customer : Customer()
        not CreditScore(customerId == $customer.customerId)
    then
        CreditScore creditScore = new CreditScore();
        creditScore.setCustomerId($customer.getCustomerId());
        creditScore.setScore(600);  // Starting base score
        creditScore.setScoreType("FICO");
        creditScore.setCalculationDate(java.time.LocalDateTime.now());
        creditScore.setVersion("1.0");
        creditScore.setStatus("CALCULATED");
        insert(creditScore);
        System.out.println("Base credit score created for customer " + $customer.getCustomerId());
end

// Age factor adjustment
rule "Age Factor Credit Adjustment"
    agenda-group "credit-scoring"
    salience 90
    when
        $customer : Customer()
        $creditScore : CreditScore(customerId == $customer.customerId)
        eval($customer.getDateOfBirth() != null)
    then
        long age = java.time.ChronoUnit.YEARS.between($customer.getDateOfBirth().toLocalDate(), 
                                                      java.time.LocalDate.now());
        int adjustment = 0;
        
        if (age >= 25 && age <= 35) {
            adjustment = 20;  // Prime age group
        } else if (age >= 36 && age <= 50) {
            adjustment = 30;  // Mature and stable
        } else if (age >= 51 && age <= 65) {
            adjustment = 25;  // Established but approaching retirement
        } else if (age < 25) {
            adjustment = -10; // Young, less established
        } else {
            adjustment = 10;  // Senior, fixed income
        }
        
        modify($creditScore) {
            setScore($creditScore.getScore() + adjustment),
            setAgeScore(adjustment)
        }
        System.out.println("Age adjustment: " + adjustment + " for customer " + $customer.getCustomerId());
end

// Account longevity factor
rule "Account History Credit Adjustment"
    agenda-group "credit-scoring"
    salience 85
    when
        $customer : Customer()
        $creditScore : CreditScore(customerId == $customer.customerId)
        $account : Account(customerId == $customer.customerId)
    then
        long monthsOpen = java.time.ChronoUnit.MONTHS.between($account.getOpenDate().toLocalDate(), 
                                                              java.time.LocalDate.now());
        int adjustment = 0;
        
        if (monthsOpen >= 60) {         // 5+ years
            adjustment = 40;
        } else if (monthsOpen >= 36) {  // 3-5 years
            adjustment = 25;
        } else if (monthsOpen >= 12) {  // 1-3 years
            adjustment = 15;
        } else if (monthsOpen >= 6) {   // 6-12 months
            adjustment = 5;
        } else {                        // Less than 6 months
            adjustment = -15;
        }
        
        modify($creditScore) {
            setScore($creditScore.getScore() + adjustment),
            setAccountHistoryScore(adjustment)
        }
        System.out.println("Account history adjustment: " + adjustment + " for customer " + $customer.getCustomerId());
end

// Transaction behavior scoring
rule "Transaction Behavior Credit Scoring"
    agenda-group "credit-scoring"
    salience 80
    when
        $customer : Customer()
        $creditScore : CreditScore(customerId == $customer.customerId)
        accumulate(
            $transaction : Transaction(
                customerId == $customer.customerId,
                timestamp after[0s,90d],
                status == "COMPLETED"
            ),
            $transactionCount : count($transaction),
            $totalAmount : sum($transaction.getAmount())
        )
    then
        int adjustment = 0;
        double avgAmount = $transactionCount > 0 ? $totalAmount / $transactionCount : 0;
        
        // Regular activity is positive
        if ($transactionCount >= 20 && $transactionCount <= 100) {
            adjustment += 15;
        } else if ($transactionCount > 100) {
            adjustment += 10; // Very active, but could be risky
        } else if ($transactionCount < 5) {
            adjustment -= 10; // Too little activity
        }
        
        // Reasonable average amounts are positive
        if (avgAmount >= 100 && avgAmount <= 2000) {
            adjustment += 10;
        } else if (avgAmount > 5000) {
            adjustment += 5; // High amounts, moderate positive
        }
        
        modify($creditScore) {
            setScore($creditScore.getScore() + adjustment),
            setTransactionBehaviorScore(adjustment)
        }
        System.out.println("Transaction behavior adjustment: " + adjustment + " for customer " + $customer.getCustomerId());
end

// Account balance and financial health
rule "Financial Health Credit Scoring"
    agenda-group "credit-scoring"
    salience 75
    when
        $customer : Customer()
        $creditScore : CreditScore(customerId == $customer.customerId)
        $account : Account(customerId == $customer.customerId, status == "ACTIVE")
    then
        int adjustment = 0;
        double balance = $account.getBalance().doubleValue();
        
        if (balance >= 50000) {
            adjustment = 50; // Excellent financial position
        } else if (balance >= 20000) {
            adjustment = 35; // Good financial position
        } else if (balance >= 10000) {
            adjustment = 20; // Decent savings
        } else if (balance >= 5000) {
            adjustment = 10; // Some savings
        } else if (balance >= 1000) {
            adjustment = 0;  // Minimal savings
        } else if (balance >= 0) {
            adjustment = -10; // Very low balance
        } else {
            adjustment = -50; // Overdrawn
        }
        
        modify($creditScore) {
            setScore($creditScore.getScore() + adjustment),
            setFinancialHealthScore(adjustment)
        }
        System.out.println("Financial health adjustment: " + adjustment + " for customer " + $customer.getCustomerId());
end

// Customer type and KYC status
rule "Customer Profile Credit Scoring"
    agenda-group "credit-scoring"
    salience 70
    when
        $customer : Customer()
        $creditScore : CreditScore(customerId == $customer.customerId)
    then
        int adjustment = 0;
        
        // KYC status
        if ("VERIFIED".equals($customer.getKycStatus())) {
            adjustment += 25;
        } else if ("PENDING".equals($customer.getKycStatus())) {
            adjustment += 5;
        } else {
            adjustment -= 30; // Not verified
        }
        
        // Customer type
        if ("BUSINESS".equals($customer.getCustomerType())) {
            adjustment += 15; // Business customers often more stable
        } else if ("INDIVIDUAL".equals($customer.getCustomerType())) {
            adjustment += 10; // Individual customers
        }
        
        // VIP status
        if ($customer.isVip()) {
            adjustment += 20;
        }
        
        modify($creditScore) {
            setScore($creditScore.getScore() + adjustment),
            setCustomerProfileScore(adjustment)
        }
        System.out.println("Customer profile adjustment: " + adjustment + " for customer " + $customer.getCustomerId());
end

// Risk incidents impact
rule "Risk Incidents Credit Impact"
    agenda-group "credit-scoring"
    salience 65
    when
        $customer : Customer()
        $creditScore : CreditScore(customerId == $customer.customerId)
        accumulate(
            $alert : RiskAlert(
                customerId == $customer.customerId,
                timestamp after[0s,365d],
                riskLevel in ("HIGH", "CRITICAL")
            ),
            $riskCount : count($alert)
        )
    then
        int adjustment = 0;
        
        if ($riskCount == 0) {
            adjustment = 20; // Clean record
        } else if ($riskCount <= 2) {
            adjustment = -10; // Minor issues
        } else if ($riskCount <= 5) {
            adjustment = -30; // Moderate issues
        } else {
            adjustment = -60; // Serious issues
        }
        
        modify($creditScore) {
            setScore($creditScore.getScore() + adjustment),
            setRiskHistoryScore(adjustment)
        }
        System.out.println("Risk history adjustment: " + adjustment + " for customer " + $customer.getCustomerId());
end

// Credit score boundaries and grade assignment
rule "Assign Credit Grade - Excellent"
    agenda-group "credit-scoring"
    salience 50
    when
        $creditScore : CreditScore(score >= 750)
    then
        modify($creditScore) {
            setGrade("EXCELLENT"),
            setRiskLevel("LOW")
        }
        System.out.println("Credit grade EXCELLENT assigned for score: " + $creditScore.getScore());
end

rule "Assign Credit Grade - Good"
    agenda-group "credit-scoring"
    salience 50
    when
        $creditScore : CreditScore(score >= 650 && score < 750)
    then
        modify($creditScore) {
            setGrade("GOOD"),
            setRiskLevel("MEDIUM")
        }
        System.out.println("Credit grade GOOD assigned for score: " + $creditScore.getScore());
end

rule "Assign Credit Grade - Fair"
    agenda-group "credit-scoring"
    salience 50
    when
        $creditScore : CreditScore(score >= 550 && score < 650)
    then
        modify($creditScore) {
            setGrade("FAIR"),
            setRiskLevel("MEDIUM")
        }
        System.out.println("Credit grade FAIR assigned for score: " + $creditScore.getScore());
end

rule "Assign Credit Grade - Poor"
    agenda-group "credit-scoring"
    salience 50
    when
        $creditScore : CreditScore(score < 550)
    then
        modify($creditScore) {
            setGrade("POOR"),
            setRiskLevel("HIGH")
        }
        System.out.println("Credit grade POOR assigned for score: " + $creditScore.getScore());
end

// Credit limit recommendation based on score
rule "Recommend Credit Limit - High Score"
    agenda-group "credit-scoring"
    salience 40
    when
        $creditScore : CreditScore(score >= 750, recommendedCreditLimit == null)
        $account : Account(customerId == $creditScore.customerId)
    then
        double balance = $account.getBalance().doubleValue();
        double recommendedLimit = Math.min(balance * 3, 100000); // 3x balance or $100k max
        
        modify($creditScore) {
            setRecommendedCreditLimit(recommendedLimit)
        }
        System.out.println("High credit limit recommended: $" + recommendedLimit + " for customer " + $creditScore.getCustomerId());
end

rule "Recommend Credit Limit - Medium Score"
    agenda-group "credit-scoring"
    salience 40
    when
        $creditScore : CreditScore(score >= 550 && score < 750, recommendedCreditLimit == null)
        $account : Account(customerId == $creditScore.customerId)
    then
        double balance = $account.getBalance().doubleValue();
        double recommendedLimit = Math.min(balance * 1.5, 25000); // 1.5x balance or $25k max
        
        modify($creditScore) {
            setRecommendedCreditLimit(recommendedLimit)
        }
        System.out.println("Medium credit limit recommended: $" + recommendedLimit + " for customer " + $creditScore.getCustomerId());
end

rule "Recommend Credit Limit - Low Score"
    agenda-group "credit-scoring"
    salience 40
    when
        $creditScore : CreditScore(score < 550, recommendedCreditLimit == null)
        $account : Account(customerId == $creditScore.customerId)
    then
        double balance = $account.getBalance().doubleValue();
        double recommendedLimit = Math.min(balance * 0.5, 5000); // 0.5x balance or $5k max
        
        modify($creditScore) {
            setRecommendedCreditLimit(recommendedLimit)
        }
        System.out.println("Low credit limit recommended: $" + recommendedLimit + " for customer " + $creditScore.getCustomerId());
end

// Generate alert for very low credit scores
rule "Very Low Credit Score Alert"
    agenda-group "credit-scoring"
    salience 30
    when
        $creditScore : CreditScore(score < 450)
        $customer : Customer(customerId == $creditScore.customerId)
    then
        RiskAlert alert = new RiskAlert();
        alert.setAlertId("CS001_" + $customer.getCustomerId());
        alert.setCustomerId($customer.getCustomerId());
        alert.setAlertType("VERY_LOW_CREDIT_SCORE");
        alert.setRiskLevel("HIGH");
        alert.setMessage("Very low credit score: " + $creditScore.getScore());
        alert.setTimestamp(java.time.LocalDateTime.now());
        alert.setSource("credit-scoring");
        alert.setRecommendedAction("RESTRICT_CREDIT");
        insert(alert);
        System.out.println("ALERT: Very low credit score for customer " + $customer.getCustomerId());
end

// Credit score monitoring for significant changes
rule "Significant Credit Score Drop"
    agenda-group "credit-scoring"
    salience 25
    when
        $creditScore : CreditScore(previousScore != null, 
                                  eval($creditScore.getScore() < $creditScore.getPreviousScore() - 100))
    then
        RiskAlert alert = new RiskAlert();
        alert.setAlertId("CS002_" + $creditScore.getCustomerId());
        alert.setCustomerId($creditScore.getCustomerId());
        alert.setAlertType("CREDIT_SCORE_DROP");
        alert.setRiskLevel("MEDIUM");
        alert.setMessage("Significant credit score drop: " + $creditScore.getPreviousScore() + " to " + $creditScore.getScore());
        alert.setTimestamp(java.time.LocalDateTime.now());
        alert.setSource("credit-scoring");
        alert.setRecommendedAction("REVIEW_ACCOUNT");
        insert(alert);
        System.out.println("ALERT: Significant credit score drop for customer " + $creditScore.getCustomerId());
end 