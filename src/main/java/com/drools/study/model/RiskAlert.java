package com.drools.study.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * RiskAlert entity representing risk alerts generated by the system.
 * Used for flagging suspicious activities, rule violations, and risk events.
 * 
 * @author Drools Study Tutorial
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class RiskAlert {
    
    /**
     * Unique alert identifier
     */
    private String alertId;
    
    /**
     * Customer ID associated with this alert
     */
    private String customerId;
    
    /**
     * Transaction ID if alert is transaction-related
     */
    private String transactionId;
    
    /**
     * Account number if alert is account-related
     */
    private String accountNumber;
    
    /**
     * Alert type (FRAUD, AML, KYC, CREDIT, OPERATIONAL, COMPLIANCE)
     */
    private String alertType;
    
    /**
     * Alert severity (LOW, MEDIUM, HIGH, CRITICAL)
     */
    private String severity;
    
    /**
     * Alert status (OPEN, INVESTIGATING, RESOLVED, FALSE_POSITIVE, ESCALATED)
     */
    private String status;
    
    /**
     * Alert title/summary
     */
    private String title;
    
    /**
     * Detailed alert description
     */
    private String description;
    
    /**
     * Rule name that triggered this alert
     */
    private String ruleName;
    
    /**
     * Rule category
     */
    private String ruleCategory;
    
    /**
     * Alert creation timestamp
     */
    private LocalDateTime createdDate;
    
    /**
     * Alert last modified timestamp
     */
    private LocalDateTime lastModifiedDate;
    
    /**
     * Alert resolution timestamp
     */
    private LocalDateTime resolvedDate;
    
    /**
     * Alert due date for investigation
     */
    private LocalDateTime dueDate;
    
    /**
     * Assigned investigator
     */
    private String assignedTo;
    
    /**
     * Investigation notes
     */
    private String investigationNotes;
    
    /**
     * Resolution notes
     */
    private String resolutionNotes;
    
    /**
     * Risk score associated with this alert (0-100)
     */
    private Integer riskScore;
    
    /**
     * Alert source system
     */
    private String sourceSystem;
    
    /**
     * Business unit responsible
     */
    private String businessUnit;
    
    /**
     * Regulatory reporting required
     */
    private Boolean requiresRegulatoryReporting;
    
    /**
     * Customer notification required
     */
    private Boolean requiresCustomerNotification;
    
    /**
     * Escalation level (0-5)
     */
    private Integer escalationLevel;
    
    /**
     * Alert category tags
     */
    private String tags;
    
    /**
     * Related alert IDs
     */
    private String relatedAlerts;
    
    /**
     * False positive indicator
     */
    private Boolean isFalsePositive;
    
    /**
     * Checks if alert is critical severity
     * @return true if critical
     */
    public boolean isCritical() {
        return "CRITICAL".equals(severity);
    }
    
    /**
     * Checks if alert is high severity
     * @return true if high severity
     */
    public boolean isHighSeverity() {
        return "HIGH".equals(severity) || isCritical();
    }
    
    /**
     * Checks if alert is open
     * @return true if open
     */
    public boolean isOpen() {
        return "OPEN".equals(status);
    }
    
    /**
     * Checks if alert is resolved
     * @return true if resolved
     */
    public boolean isResolved() {
        return "RESOLVED".equals(status);
    }
    
    /**
     * Checks if alert is overdue
     * @return true if overdue
     */
    public boolean isOverdue() {
        return dueDate != null && dueDate.isBefore(LocalDateTime.now()) && isOpen();
    }
    
    /**
     * Checks if alert is fraud-related
     * @return true if fraud alert
     */
    public boolean isFraudAlert() {
        return "FRAUD".equals(alertType);
    }
    
    /**
     * Checks if alert is AML-related
     * @return true if AML alert
     */
    public boolean isAmlAlert() {
        return "AML".equals(alertType);
    }
    
    /**
     * Checks if alert requires immediate attention (critical or high + overdue)
     * @return true if requires immediate attention
     */
    public boolean requiresImmediateAttention() {
        return isCritical() || (isHighSeverity() && isOverdue());
    }
    
    /**
     * Checks if alert is escalated
     * @return true if escalated
     */
    public boolean isEscalated() {
        return "ESCALATED".equals(status);
    }
    
    /**
     * Checks if alert is being investigated
     * @return true if under investigation
     */
    public boolean isUnderInvestigation() {
        return "INVESTIGATING".equals(status);
    }
    
    /**
     * Gets alert age in hours
     * @return age in hours
     */
    public long getAgeInHours() {
        if (createdDate == null) return 0;
        return java.time.Duration.between(createdDate, LocalDateTime.now()).toHours();
    }
    
    /**
     * Checks if alert is aged (> 24 hours old)
     * @return true if aged
     */
    public boolean isAged() {
        return getAgeInHours() > 24;
    }
    
    /**
     * Checks if alert has high risk score (>= 70)
     * @return true if high risk score
     */
    public boolean hasHighRiskScore() {
        return riskScore != null && riskScore >= 70;
    }
    
    /**
     * Gets the risk level which corresponds to the severity
     * @return risk level (severity)
     */
    public String getRiskLevel() {
        return severity;
    }
} 